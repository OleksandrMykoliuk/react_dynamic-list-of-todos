{"version":3,"sources":["components/Todo/TodoShape.js","components/Todo/Todo.js","components/Input/Input.js","components/TodoList/TodoListShape.js","components/Input/InputShape.js","components/Select/Select.js","components/Select/SelectShape.js","components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","components/CurrentUser/CurrentUserShape.js","App.jsx","index.js"],"names":["TodoShape","PropTypes","shape","id","number","isRequired","userId","completed","bool","title","string","classNames","require","Todo","todos","selectUserId","selectedUserId","className","map","todo","TodoList__item","key","type","checked","readOnly","button","onClick","Input","arrayOf","func","value","handleChange","placeholder","name","onChange","Select","TodoList","state","searchValue","showedTodos","event","target","setState","this","props","preparedTodos","filter","toLowerCase","includes","React","PureComponent","request","url","options","fetch","then","res","ok","Error","status","statusText","json","result","data","getUser","CurrentUser","clearUserId","currentUser","userUpdate","user","email","phone","App","catch","error","window","alert","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6cce687.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number,\n  completed: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n}).isRequired;\n","import React from 'react';\nimport { TodoShape } from './TodoShape';\n\nconst classNames = require('classnames');\n\nexport const Todo = ({ todos, selectUserId, selectedUserId }) => (\n  <div className=\"TodoList__list-container\">\n    <ul className=\"TodoList__list\">\n      {todos.map(todo => (\n        <li\n          className={\n            classNames({\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })\n          }\n          key={todo.id}\n        >\n          <label>\n            {\n              todo.completed\n                ? <input type=\"checkbox\" checked readOnly />\n                : <input type=\"checkbox\" readOnly />\n            }\n            <p>{todo.title}</p>\n          </label>\n\n          <button\n            className={\n              classNames({\n                button: true,\n                'TodoList__user-button': true,\n                'TodoList__user-button--selected':\n                   selectedUserId === todo.userId,\n              })\n            }\n            type=\"button\"\n            onClick={() => selectUserId(todo.userId)}\n          >\n            {`User #${todo.userId}`}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nTodo.propTypes = TodoShape;\n","import React from 'react';\nimport { InputShape } from './InputShape';\n\nexport const Input = ({ value, handleChange }) => (\n  <label>\n    <input\n      type=\"text\"\n      className=\"TodoList__input\"\n      placeholder=\"write name of title, please\"\n      name=\"searchValue\"\n      value={value}\n      onChange={handleChange}\n    />\n  </label>\n);\n\nInput.propTypes = InputShape;\n","import PropTypes from 'prop-types';\nimport { TodoShape } from '../Todo/TodoShape';\n\nexport const TodoListShape = PropTypes.shape({\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  selectUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n}).isRequired;\n","import PropTypes from 'prop-types';\n\nexport const InputShape = {\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { SelectShape } from './SelectShape';\n\nexport const Select = ({ value, handleChange }) => (\n  <label>\n    <select\n      name=\"showedTodos\"\n      value={value}\n      className=\"TodoList__select\"\n      onChange={handleChange}\n    >\n      <option value=\"\">\n        All\n      </option>\n      <option value=\"completed\">\n        Completed\n      </option>\n      <option value=\"active\">\n        Active\n      </option>\n    </select>\n  </label>\n);\n\nSelect.propTypes = SelectShape;\n","import PropTypes from 'prop-types';\n\nexport const SelectShape = {\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../Todo';\nimport { TodoListShape } from './TodoListShape';\nimport { Input } from '../Input';\nimport { Select } from '../Select';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    searchValue: '',\n    showedTodos: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, selectUserId, selectedUserId } = this.props;\n    const { searchValue, showedTodos } = this.state;\n    let preparedTodos = todos.filter(\n      todo => todo.title.toLowerCase().includes(searchValue.toLowerCase()),\n    );\n\n    if (showedTodos === 'completed') {\n      preparedTodos = preparedTodos.filter(todo => todo.completed);\n    }\n\n    if (showedTodos === 'active') {\n      preparedTodos = preparedTodos.filter(todo => !todo.completed);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <div className=\"TodoList__form\">\n          <Input value={searchValue} handleChange={this.handleChange} />\n          <Select value={showedTodos} handleChange={this.handleChange} />\n        </div>\n        <h2>Todos:</h2>\n        <Todo\n          todos={preparedTodos}\n          selectUserId={selectUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = TodoListShape;\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos')\n  .then(result => result.filter(\n    todo => todo.title && todo.id && todo.userId,\n  ));\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\nimport { CurrentUserShape } from './CurrentUserShape';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount() {\n    this.userUpdate(this.props.selectedUserId);\n  }\n\n  componentDidUpdate() {\n    this.userUpdate(this.props.selectedUserId);\n  }\n\n  async userUpdate(userId) {\n    const { currentUser } = this.state;\n\n    if (userId !== currentUser.id) {\n      try {\n        const user = await getUser(userId);\n\n        this.setState({ currentUser: user });\n      } catch (error) {\n        this.setState({ currentUser: {} });\n      }\n    }\n  }\n\n  render() {\n    const { currentUser } = this.state;\n\n    return (\n      <div>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n        </div>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={this.props.clearUserId}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = CurrentUserShape;\n","import PropTypes from 'prop-types';\n\nexport const CurrentUserShape = PropTypes.shape({\n  getUser: PropTypes.func.isRequired,\n  clearUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n}).isRequired;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUser } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      })\n      // eslint-disable-next-line no-alert\n      .catch(error => window.alert(`Something went wrong. ${error}`));\n  }\n\n  selectUserId = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectUserId={this.selectUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                getUser={getUser}\n                clearUserId={this.clearUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}